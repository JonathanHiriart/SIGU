@page "/AgregarUsuarios"
@inject NavigationManager nav  
@inject UsuarioServicioLogin usuarioServicioLogin  
@inject UsuarioAltaUseCase usuarioAltaUseCase 
<PageTitle>Agregar Usuario</PageTitle>  

@using SIGU.Aplicacion.DTOs  
@using SIGU.Aplicacion.Enums  

@if (cargando)  
{  
    <p>Cargando...</p>  
}  
else if (!tienePermiso)  
{  
    <div class="alert alert-danger">  
        No tienes permiso para agregar usuarios.  
    </div>  
}  
else  
{  
    <h3>Agregar Usuario</h3>
    <p>Completa los siguientes campos para agregar un nuevo usuario:</p>

    <EditForm Model="usuarioNuevo" OnValidSubmit="AgregarUsuario">
        <DataAnnotationsValidator />
        <ValidationSummary />
        <InputText @bind-Value="usuarioNuevo.Nombre" class="form-control mb-2" placeholder="Nombre" />
        <InputText @bind-Value="usuarioNuevo.Apellido" class="form-control mb-2" placeholder="Apellido" />
        <InputNumber @bind-Value="usuarioNuevo.DNI" class="form-control mb-2" placeholder="DNI" />
        <InputText @bind-Value="usuarioNuevo.Email" class="form-control mb-2" placeholder="Correo Electrónico" />
        <InputText @bind-Value="usuarioNuevo.Telefono" class="form-control mb-2" placeholder="Teléfono" />
        <InputText @bind-Value="usuarioNuevo.Contrasenia" class="form-control mb-2" placeholder="Contraseña" type="password" />
        <button class="btn btn-primary mb-2" type="submit">Agregar nuevo usuario</button>
    </EditForm>
    @if (!string.IsNullOrEmpty(mensaje))  
    {  
        <div class="mt-2">@mensaje</div>  
    }  
}

@code {
    UsuarioDTO usuarioNuevo = new UsuarioDTO();
    string mensaje = string.Empty;
    bool tienePermiso = false;
    bool cargando = true;

    protected override async Task OnInitializedAsync()
    {
        Console.WriteLine("Iniciando la página de agregar usuarios...");
        try
        {
            Console.WriteLine("Obteniendo usuario actual...");
            Usuario usuarioActual = await Task.Run(() => usuarioServicioLogin.GetUser());
            Console.WriteLine($"ID del usuario actual: {usuarioActual?.Id}");
            if (usuarioActual == null)
            {
                nav.NavigateTo("/");
                return;
            }
            Console.WriteLine("Verificando permisos...");
            tienePermiso = usuarioActual.Permisos.Contains(Permiso.UsuarioAlta);
            Console.WriteLine("Permisos verificados.");
        }
        catch (Exception ex)
        {
            tienePermiso = false;
            Console.WriteLine("ERROR EN OnInitializedAsync: " + ex.Message);
        }

        cargando = false;
    }

    async Task AgregarUsuario()
    {
        try
        {
            Console.WriteLine("Validando Usuario");
            await usuarioAltaUseCase.EjecutarAsync(usuarioNuevo, usuarioServicioLogin.recuperarID());
            mensaje = "Usuario agregado correctamente.";
            Console.WriteLine("Usuario agregado correctamente.");
            usuarioNuevo = new UsuarioDTO();
        }
        catch (Exception ex)
        {
            mensaje = $"Error: {ex.Message}";
        }
    }
}